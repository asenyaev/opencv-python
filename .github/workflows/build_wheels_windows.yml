name: Build PYPI wheels for opencv-python on Windows

on:
  push:
    branches:
      - asen/cygwin
    paths-ignore:
      - '.github/workflows/build_wheels_linux*'
      - '.github/workflows/build_wheels_macos*'
  release:
    types: [published, edited]


jobs:
  build-windows-x86_64:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        python-version: [3.8] # [3.6, 3.7, 3.8, 3.9]
        platform: [x64] # [x86, x64]
        with_contrib: [0, 1]
        without_gui: [0, 1]
        build_sdist: [0]

    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      SDIST: ${{ matrix.build_sdist || 0 }}
      ENABLE_HEADLESS: ${{ matrix.without_gui }}
      ENABLE_CONTRIB: ${{ matrix.with_contrib }}
      OPENCV_TEST_DATA_PATH: ${{ github.workspace }}\opencv_extra\testdata
      CI_BUILD: 1

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: false
        fetch-depth: 0

    - name: Install Cygwin
      uses: egor-tensin/setup-cygwin@v3
      with:
        platform: x64
        install-dir: 'C:\tools\cygwin'
        packages: >
          python37-devel python37-zipp python37-importlib-metadata
          python37-cython python37-pip python37-wheel python37-cffi
          python37-pytz python37-setuptools python37-pytest
          python37-hypothesis liblapack-devel libopenblas
          gcc-core gcc-fortran git dash cmake

    - name: Set Windows PATH
      uses: egor-tensin/cleanup-path@v1
      with:
        dirs: 'C:\tools\cygwin\bin;C:\tools\cygwin\lib\lapack'

    - name: build script
      run: |
        dash -c "/usr/bin/python3.7 -m pip install setuptools wheel"
        dash -c "/usr/bin/python3.7 -m pip wheel --wheel-dir=wheelhouse . --verbose"

    - name: before test
      run: |
        dash -c "/usr/bin/git submodule update --init --recursive"
        dash -c "/usr/bin/python3.7 -m pip install --user --no-warn-script-location wheelhouse/opencv*.whl""
        dash -c "/usr/bin/cd ${{ github.workspace }}/tests"
        dash -c "/usr/bin/python3.7 get_build_info.py"

    - name: run test
      run: |
        dash -c "/usr/bin/cd ${{ github.workspace }}/opencv"
        dash -c "/usr/bin/python3.7 modules\python\test\test.py -v --repo ."
      shell: cmd

    - name: saving artifacts
      uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: wheelhouse/opencv*.whl

  test_release_opencv_python:
    if: github.event_name == 'release' && github.event.release.prerelease
    needs: [build-windows-x86_64]
    runs-on: ubuntu-latest
    environment: test-opencv-python-release
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels
          path: wheelhouse/

      - name: Upload all wheels
        run: |
          python -m pip install twine
          python -m twine upload --repository testpypi -u ${{ secrets.PYPI_USERNAME }} -p ${{ secrets.PYPI_PASSWORD }} --skip-existing wheelhouse/opencv_*

  release_opencv_python:
    if: github.event_name == 'release' && !github.event.release.prerelease
    needs: [build-windows-x86_64]
    runs-on: ubuntu-latest
    environment: opencv-python-release
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels
          path: wheelhouse/

      - name: Upload wheels for opencv_python
        run: |
          python -m pip install twine
          python -m twine upload -u ${{ secrets.OPENCV_PYTHON_USERNAME }} -p ${{ secrets.OPENCV_PYTHON_PASSWORD }} --skip-existing wheelhouse/opencv_python-*

      - name: Upload wheels for opencv_contrib_python
        run: |
          python -m pip install twine
          python -m twine upload -u ${{ secrets.OPENCV_CONTRIB_PYTHON_USERNAME }} -p ${{ secrets.OPENCV_CONTRIB_PYTHON_PASSWORD }} --skip-existing wheelhouse/opencv_contrib_python-*

      - name: Upload wheels for opencv_python_headless
        run: |
          python -m pip install twine
          python -m twine upload -u ${{ secrets.OPENCV_PYTHON_HEADLESS_USERNAME }} -p ${{ secrets.OPENCV_PYTHON_HEADLESS_PASSWORD }} --skip-existing wheelhouse/opencv_python_headless-*

      - name: Upload wheels for opencv_contrib_python_headless
        run: |
          python -m pip install twine
          python -m twine upload -u ${{ secrets.OPENCV_CONTRIB_PYTHON_HEADLESS_USERNAME }} -p ${{ secrets.OPENCV_CONTRIB_PYTHON_HEADLESS_PASSWORD }} --skip-existing wheelhouse/opencv_contrib_python_headless-*
